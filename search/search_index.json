{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Home","text":"<p>UDOT Wrangler is a Python library for UDOT-related paramters and utilities with Network Wrangler.</p>"},{"location":"index.html#system-requirements","title":"System Requirements","text":"<p>UDOT Wrangler does require Python 3.7+. (Note: Recommend Python version: 3.10) If you have a different version of Python installed (e.g. from ArcGIS), PIP or a similar virtual environment manager can care of installing it for you in the installation instructions below.</p> <p>installing Python</p> <p>UDOT Wrangler has been fully tested with 3.10. Using the latest version of Python 3.13 may have issues with any updated APIs or dependencies. If you would like to install Python 3.10. You can do so from the official Python release: https://www.python.org/downloads/. It should take care of installing pip for you.</p> <p>installing conda?</p> <p>For conda users, apologies that UDOT Wrangler has not yet been published to conda distribution channels. You will not be able to install via your common <code>conda install ...</code> command. But you could use the From Clone option describes in the Installation section below.</p>"},{"location":"index.html#installation","title":"Installation","text":""},{"location":"index.html#step-1-create-and-activate-virtual-environment","title":"Step 1. Create and Activate Virtual Environment","text":"<p>Create and/or activate the virtual environment where you want to install UDOT Wrangler.</p> <p>Option 1. Create a new Python virtual environment for using pip</p> <pre><code>python -m venv udot_wrangler_env\nudot_wrangler_env\\Script\\activate\npip install udot-wrangler\n</code></pre> <p>Option 2. Use Python package and project manager such as UV</p> <p>If you care about speed and dependency lock, UV is a better option than pip.</p> <pre><code>uv init\n</code></pre>"},{"location":"index.html#step-2-install-udot-wrangler-and-its-dependencies","title":"Step 2. Install UDOT Wrangler and its Dependencies","text":"<p>UDOT Wrangler is available on PyPI.</p>"},{"location":"index.html#latest-official-version","title":"Latest Official Version","text":"<p>Users can install via standard pip command. In the activated Python environment created in Step 1, type: <pre><code>pip install udot-wrangler\n</code></pre></p> <p>Users can also install via UV. <pre><code>uv add udot-wrangler\n# if `network-wrangler` is a prerelease\n# uv add udot-wrangler --prerelease=allow\n</code></pre></p>"},{"location":"index.html#from-github","title":"From GitHub","text":"<pre><code>pip install git+https://github.com/wsp-sag/udot_wrangler.git@main#egg=udot_wrangler\n</code></pre> <p>If you wanted to install from a specific tag/version number or branch, replace <code>@main</code> with <code>@&lt;branchname&gt;</code>  or <code>@tag</code></p>"},{"location":"index.html#from-clone","title":"From Clone","text":"<p>If you are going to be working on UDOT Wrangler locally, you might want to clone it to your local machine and install it from the clone.  The -e will install it in editable mode.</p> <p>If you have GitHub desktop installed, you can either do this by using the GitHub user interface by clicking on the green button \u201cclone or download\u201d in the main UDOT wrangler repository page.</p> <p>Otherwise, you can use the command prompt to navigate to the directory that you would like to store your UDOT wrangler clone and then using a git command to clone it.</p> <pre><code>cd path to where you want to put wrangler\ngit clone https://github.com/wsp-sag/udot_wrangler\n</code></pre> <p>Then you should be able to install UDOT Wrangler in \u201cdevelop\u201d mode.</p> <pre><code>cd udot_wrangler\npip install -e .\n</code></pre>"},{"location":"index.html#common-installation-issues","title":"Common Installation Issues","text":"<p>TBD</p>"},{"location":"index.html#quickstart","title":"Quickstart","text":"<p>To get a feel for the API and using project cards, please refer to the prototype jupyter notebooks in <code>.notebook</code>.</p> <p>To start the notebook, open a command line in the udot_wrangler top-level directory and type:</p> <p><code>jupyter notebook</code></p>"},{"location":"index.html#contributing","title":"Contributing","text":"<p>Contributions are welcome. Please review contributing guidelines and instructions.</p>"},{"location":"index.html#companion-software","title":"Companion Software","text":"<p>The following software are key dependencies of UDOT Wrangler. They are installed as part of UDOT Wrangler installation so that you do not need to install them individually.</p> <p>NetworkWrangler: Network Wrangler is a Python library for managing travel model network scenarios.</p> <p>CubeWrangler: A Python package that contains utilities for working with Network Wrangler and CUBE. CUBE is a commercial travel modeling software package. CUBE Wrangler contains methods for carrying out the I/O to and from CUBE.</p> <p>ProjectCard: Initially part of NetworkWrangler, the functionality for reading, writing and validating ProjectCard objects was pulled out into a separate project so that it could be used by other entities without necessitating NetworkWrangler.</p>"},{"location":"index.html#having-an-issue","title":"Having an issue?","text":"<p>\ud83e\udeb2 UDOT Wrangler may contain bugs.</p> <p>\ud83e\udd14 Also, since it has primarily been used by its developers, the documentation may contain some omissions or not be entirely clear.</p> <p>But we\u2019d love to make it better! Please report bugs or incorrect/unclear/missing documentation with a GitHub Issue -  or fix them yourself with a pull request!</p>"},{"location":"index.html#license","title":"License","text":"<p>Apache-2.0</p>"},{"location":"index.html#release-history","title":"Release History","text":""},{"location":"index.html#changelog","title":"Changelog","text":"<p>Notable changes and version history.</p> Version Date Comment 0.1.2 2025-07-20 Prototyped with Cache County network"},{"location":"api.html","title":"API Documentation","text":"<p>To Be Added</p>"},{"location":"development.html","title":"Development","text":""},{"location":"development.html#contributing-to-udot-wrangler","title":"Contributing to UDOT Wrangler","text":""},{"location":"development.html#setup","title":"Setup","text":""},{"location":"development.html#recommended-tools","title":"Recommended Tools","text":"<ul> <li>GitHub desktop to manage access to the main repository.</li> <li>Git to conduct required version control.</li> <li>VSCode to edit and test code.</li> <li>Some type of terminal application (note, this comes with Mac/Ubuntu).</li> </ul>"},{"location":"development.html#setup-virtual-environment","title":"Setup Virtual Environment","text":"<p>Create and/or activate the virtual environment where you want to install UDOT Wrangler.</p>"},{"location":"development.html#clone","title":"Clone","text":"<p>To effectively work on UDOT Wrangler locally, install it from a clone by either:</p> <ol> <li>Use the GitHub user interface by clicking on the green button \u201cclone or download\u201d in the main UDOT wrangler repository page.</li> <li>Use the command prompt in a terminal to navigate to the directory that you would like to store your udot wrangler clone and then using a git command to clone it.</li> </ol> <p>Clone udot wrangler</p> <pre><code>cd path to where you want to put wrangler\ngit clone https://github.com/wsp-sag/udot_wrangler\n</code></pre>"},{"location":"development.html#install-in-develop-mode","title":"Install in Develop Mode","text":"<p>Install UDOT Wrangler in \u201cdevelop\u201d mode using the <code>-e</code> flag so that changes to your code will be reflected when you are using and testing udot wrangler:</p> <p>Install UDOT Wrangler from Clone</p> <pre><code>cd udot_wrangler\npip install -e .\n</code></pre>"},{"location":"development.html#ide-settings","title":"IDE Settings","text":""},{"location":"development.html#vscode","title":"VSCode","text":"<p>Select conda env as Python interpreter:</p> <p><code>cmd-shift-P</code>: Python: Select Interpreter</p>"},{"location":"development.html#development-workflow","title":"Development Workflow","text":"<ol> <li>Create an issue for any features/bugs that you are working on.</li> <li>Create a branch to work on a new issue (or checkout an existing one where the issue is being worked on).  </li> </ol>"},{"location":"development.html#code-of-conduct","title":"Code of Conduct","text":"<p>Contributors to the UDOT Wrangler Project are expected to read and follow the CODE_OF_CONDUCT for the project.</p>"},{"location":"development.html#contributors","title":"Contributors","text":"<ol> <li>Sijia W.</li> </ol> <p>Note</p> <p>There are likely more contributors - feel free to add your name if we missed it!</p>"},{"location":"development.html#release-history","title":"Release History","text":""},{"location":"development.html#changelog","title":"Changelog","text":"<p>Notable changes and version history.</p> Version Date Comment 0.1.2 2025-07-20 Prototyped with Cache County network"},{"location":"how_to.html","title":"How To","text":""},{"location":"how_to.html#build-a-base-network-scenario-from-udot-cube-network","title":"Build a Base Network Scenario from UDOT CUBE Network","text":"<p>You can find the example jupyter notebook <code>01-make-network-wrangler-files-from-cube.ipynb</code>.</p> <p>create a base scenario</p> <p>This step should only be run once to create the base scenario. Once created, all work should be performed on top of the base scenario.</p>"},{"location":"how_to.html#create-a-project-card-from-a-cube-log-file","title":"Create A Project Card from A CUBE LOG File","text":"<p>You can find the example jupyter notebook <code>02-make-project-cards-from-cube-logs.ipynb</code>.</p> <p>add project metadata to project card skeleton</p> <p>The Project Cards created by this notebook are \u201cskeleton\u201d in that they do not contain enough project meta information. User can open the skeletons and enter the information on <code>project</code>, <code>tags</code>, <code>dependencies</code>, and <code>notes</code>. See documentation from ProjectCard</p>"},{"location":"how_to.html#push-project-cards-to-a-registry","title":"Push Project Cards to A Registry","text":"<p>When two people coding network changes in parallel in CUBE, it is possible that they create new links and nodes without overlapping IDs. However, overlapping IDs are not allow in Network Wrangler by design. To avoid overlapping IDs, users should push the project cards they generated into a Project Card Registry. A project card registry does the following:</p> <ul> <li>Identifies Project Cards that add roadway or transit links to the network.</li> <li>Hosts a registry of new nodes and/or new links, identifying the project that adds them</li> <li>Automatically recodes overlapping new nodes and/or new link IDs in the project cards</li> <li>Fail if the Project Card adds a node or link with an ID that is already in the base network, as this suggest there may be a disconnect between the configuration file and the details of the base network.</li> </ul> <p>add project cards to registry</p> <p>We have set up a registry for the Cache county: cache_project_card_registry, and have staged some real project cards in the <code>stage</code> branch. Users can continue to add project cards to the <code>stage</code> branch or create another branch.</p>"},{"location":"how_to.html#create-a-build-network-scenario","title":"Create a Build Network Scenario","text":"<p>You can find the example jupyter notebook <code>03-apply-project-cards-and-create-buid-network.ipynb</code>.</p> <p>mix and match project cards</p> <p>You can create a scenario with a group of project cards by specifying the corresponding project <code>tag</code></p> <p>write out CUBE network</p> <p>UDOT Wrangler does not require CUBE license. Therefore it does not directly output a .net CUBE file. Instead, it write out links and nodes in fixed width format and a CUBE .s script that users can execute in CUBE to create the .net file.</p>"}]}